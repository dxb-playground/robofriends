{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","components/MainPage.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","CardList","robots","map","robot","key","SearchBox","searchChange","console","log","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","this","Component","CounterButton","updateCount","setState","count","color","onClick","PureComponent","Header","MainPage","filterRobots","filter","toLowerCase","includes","searchField","onRequestRobots","onSearchChange","isPending","App","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialState","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCJSC,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACxB,OACE,yBAAKC,UAAU,uCACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,mBACrB,6BACE,4BAAKC,GACL,2BAAIC,MCYGI,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BAEIA,EACGC,KACC,SAAAC,GAAK,OAAI,kBAAC,EAAD,CACPC,IAAKD,EAAMT,GACXA,GAAIS,EAAMT,GACVC,KAAMQ,EAAMR,KACZC,MAAOO,EAAMP,aCGZS,EAdG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAEnB,OADAC,QAAQC,IAAI,aAEV,yBAAKX,UAAU,OACb,2BACEA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUL,MCAHM,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WCaEC,E,kDAfb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACXC,UAAU,GAHK,E,qDAQjB,OAAIC,KAAKF,MAAMC,SACN,yDAEFC,KAAKT,MAAMK,a,GAZMK,aC4BbC,E,kDA3Bb,aAAe,IAAD,8BACZ,gBAqBFC,YAAc,WACZ,EAAKC,UAAS,SAAAN,GAAK,MAAK,CAAEO,MAAOP,EAAMO,MAAQ,OArB/C,EAAKP,MAAQ,CACXO,MAAO,GAHG,E,qDAYZ,OACE,4BACEjC,GAAG,UACHkC,MAAON,KAAKT,MAAMe,MAClBC,QAASP,KAAKG,aAHhB,UAIUH,KAAKF,MAAMO,W,GAlBCG,iBCiBbC,E,uKATX,OADAxB,QAAQC,IAAI,UAEV,6BACE,wBAAIX,UAAU,MAAd,eACA,kBAAC,EAAD,CAAe+B,MAAO,a,GAVTL,aCmCNS,G,kNAzBbC,aAAe,kBAAM,EAAKpB,MAAMZ,OAAOiC,QAAO,SAAA/B,GAC5C,OAAOA,EAAMR,KAAKwC,cAAcC,SAAS,EAAKvB,MAAMwB,YAAYF,mB,kEAJhEb,KAAKT,MAAMyB,oB,+BAOH,IAAD,EAC+BhB,KAAKT,MAAnC0B,EADD,EACCA,eAER,OAHO,EACiBC,UAGf,uCAIP,yBAAK3C,UAAU,MACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWS,aAAciC,IACzB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUtC,OAAQqB,KAAKW,wB,GAtBZV,cCYjBkB,G,6KAEF,OAAQ,kBAAC,EAAanB,KAAKT,W,GAFbU,cAMHmB,eApBS,SAAAtB,GACtB,MAAO,CACLiB,YAAajB,EAAMuB,aAAaN,YAChCpC,OAAQmB,EAAMwB,cAAc3C,OAC5BuC,UAAWpB,EAAMwB,cAAcJ,UAC/BK,MAAOzB,EAAMwB,cAAcC,UAGJ,SAAAC,GACzB,MAAO,CACLP,eAAgB,SAAAQ,GAAK,OAAID,ECTY,CACvCrC,KCRiC,sBDSjCuC,QDOmDD,EAAME,OAAOC,SAC9DZ,gBAAiB,kBAAMQ,GCLQ,SAACA,GAClCA,EAAS,CAAErC,KCXyB,2BDYpC0C,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAAErC,KCbS,yBDaqBuC,QAASO,OAC/DC,OAAM,SAAAX,GAAK,OAAIC,EAAS,CAAErC,KCbM,wBDauBuC,QAASH,cDStDH,CAA6CD,G,eGnBtDgB,EAAe,CACnBpB,YAAa,IAYTqB,EAAqB,CACzBlB,WAAW,EACXvC,OAAQ,GACR4C,MAAO,MCXHc,EAASC,yBACTC,EAAcC,YAAgB,CAACnB,aDFT,WAAwC,IAAvCvB,EAAsC,uDAA9BqC,EAAcM,EAAgB,uDAAP,GAC1D,OAAQA,EAAOtD,MACb,IDb+B,sBCc7B,OAAOuD,OAAOC,OAAO,GAAI7C,EAAO,CAAEiB,YAAa0B,EAAOf,UACxD,QACE,OAAO5B,ICHsCwB,cDatB,WAA8C,IAA7CxB,EAA4C,uDAApCsC,EAAoBK,EAAgB,uDAAP,GACjE,OAAQA,EAAOtD,MACb,ID1BkC,yBC2BhC,OAAOuD,OAAOC,OAAO,GAAI7C,EAAO,CAAEoB,WAAW,IAC/C,ID3BkC,yBC4BhC,OAAOwB,OAAOC,OAAO,GAAI7C,EAAO,CAAEoB,WAAW,EAAOvC,OAAQ8D,EAAOf,UACrE,ID5BiC,wBC6B/B,OAAOgB,OAAOC,OAAO,GAAI7C,EAAO,CAAEoB,WAAW,EAAOK,MAAOkB,EAAOf,UACpE,QACE,OAAO5B,MCrBP8C,EAAQC,YACZN,EACAO,YACEC,IACAV,IAIJW,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SbyGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAX,GACLtC,QAAQsC,MAAMA,EAAMkC,c","file":"static/js/main.cb42aa16.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className='bg-light-green dib br3 pa3 ma2 grow'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots\n          .map(\n            robot => <Card\n              key={robot.id}\n              id={robot.id}\n              name={robot.name}\n              email={robot.email} />\n          )\n      }\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  console.log('SearchBox');\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That is not good.</h1>\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { PureComponent } from 'react';\n\nclass CounterButton extends PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      count: 0,\n    };\n  }\n\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   return this.state.count !== nextState.count;\n  // }\n\n  render() {\n    return (\n      <button\n        id=\"counter\"\n        color={this.props.color}\n        onClick={this.updateCount}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n\n  updateCount = () => {\n    this.setState(state => ({ count: state.count + 1 }));\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   return false;\n  // }\n\n  render () {\n    console.log('Header');\n    return (\n      <div>\n        <h1 className='f1'>RoboFriends</h1>\n        <CounterButton color={'red'}/>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\nimport './MainPage.css';\n\nclass MainPage extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  filterRobots = () => this.props.robots.filter(robot => {\n    return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\n  })\n\n  render() {\n    const { onSearchChange, isPending } = this.props;\n\n    if (isPending) {\n      return <h1>Loading</h1>;\n    }\n\n    return (\n      <div className='tc'>\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={this.filterRobots()} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport MainPage from '../components/MainPage';\nimport { setSearchField, requestRobots } from '../actions';\nimport './App.css';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\nclass App extends Component {\n  render () {\n    return (<MainPage {...this.props} />);\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants';\n\nconst initialState = {\n  searchField: ''\n};\n\nexport const searchRobots = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: null,\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { isPending: false, robots: action.payload });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { isPending: false, error: action.payload });\n    default:\n      return state;\n  }\n};\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createLogger } from 'redux-logger';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(\n    thunkMiddleware,\n    logger\n  )\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}